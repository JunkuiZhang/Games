meanval1 <- mean(data[,2],na.rm = T)
if(j == 1) {
meanval <- c(meanval1)
}
else {
meanval <- c(meanval,meanval1)
}
}
else {
meanval1 <- mean(data[,3],na.rm = T)
if(j == 1) {
meanval <- c(meanval1)
}
else {
meanval <- c(meanval,meanval1)
}
}
j <- j + 1
}
mean(meanval)
}
pollutantmean("specdata", "sulfate", 1:10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
3
submit()
submit()
submit()
submit()
submit()
submit()
cr
a <- c(1,2,3)
b <- c(4,5,6)
d <- data.frame(a,b)
d
submit()
submit
submit()
submit()
submit()
submit()
submit()
corr <- function(directory,threshold = 0) {
j <- 1
for(i in 1:323) {
if(j < 100) {
if(j < 10) {
filename <- paste("00",j,sep = "")
}
else {
filename <- paste("0",j,sep = "")
}
}
else {
filename <- j
}
path <- paste("~/",directory,"/",filename,".csv",sep = "")
rawdata <- read.csv(path)
good <- complete.cases(rawdata)
data <- rawdata[good,]
a <- nrow(data)
if(j == 1) {
if(a < threshold) {
z <- seq(len = 0)
csulfate <- seq(len = 0)
cnitrate <- seq(len = 0)
}
else {
csulfate <- data[,2]
cnitrate <- data[,3]
z <- cor(csulfate,cnitrate)
}
}
else {
if(a < threshold) {
z <- z
}
else {
csulfate <- data[,2]
cnitrate <- data[,3]
z <- c(z,cor(csulfate,cnitrate))
}
}
j <- j + 1
}
z
}
cr <- corr("specdata", 150)
summary(cr)
corr <- function(directory,threshold = 0) {
j <- 1
for(i in 1:332) {
if(j < 100) {
if(j < 10) {
filename <- paste("00",j,sep = "")
}
else {
filename <- paste("0",j,sep = "")
}
}
else {
filename <- j
}
path <- paste("~/",directory,"/",filename,".csv",sep = "")
rawdata <- read.csv(path)
good <- complete.cases(rawdata)
data <- rawdata[good,]
a <- nrow(data)
if(j == 1) {
if(a < threshold) {
z <- seq(len = 0)
csulfate <- seq(len = 0)
cnitrate <- seq(len = 0)
}
else {
csulfate <- data[,2]
cnitrate <- data[,3]
z <- cor(csulfate,cnitrate)
}
}
else {
if(a < threshold) {
z <- z
}
else {
csulfate <- data[,2]
cnitrate <- data[,3]
z <- c(z,cor(csulfate,cnitrate))
}
}
j <- j + 1
}
z
}
cr <- corr("specdata", 150)
summary(cr)
submit()
submit()
pollutantmean <- function(directory,pollutant,id = 1:332) {
j <- 1
for(i in id) {
if(id[j] < 100) {
if(id[j] < 10) {
filename <- paste("00",id[j],sep = "")
}
else {
filename <- paste("0",id[j],sep = "")
}
}
else {
filename <- id[j]
}
path <- paste("~/",directory,"/",filename,".csv",sep = "")
rawdata <- read.csv(path)
good <- complete.cases(rawdata)
data <- rawdata[good,]
if(pollutant == "sulfate") {
meanval1 <- mean(data[,2],na.rm = T)
if(j == 1) {
meanval <- c(meanval1)
}
else {
meanval <- c(meanval,meanval1)
}
}
else {
meanval1 <- mean(data[,3],na.rm = T)
if(j == 1) {
meanval <- c(meanval1)
}
else {
meanval <- c(meanval,meanval1)
}
}
j <- j + 1
}
meanval
}
pollutantmean("specdata", "sulfate", 1:10)
a <- pollutantmean("specdata", "sulfate", 1:10)
a
mean(a)
q()
library(datasets)
data("iris")
?iris
x <- split(iris,iris$Sepal.Length)
mean(x)
x
mean(x[x[,5] == "virginica",])
mean(x[x[,4] == "virginica",])
dim(x)
mapply(mean,x)
x <- split(iris,iris$Species)
x
x$virginica
y <- x$virginica
mean(y$Sepal.Length)
iris
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
data("mtcars")
mtcars
tapply(mtcars$cyl,mtcars$mpg,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
debug(ls)
ls
q()
# 1.makeCacheMatrix: This function creates a special
# "matrix" object that can cache its inverse.
# 2.cacheSolve: This function computes the inverse of
# the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the
# matrix has not changed), then the cachesolve should
# retrieve the inverse from the cache.
## make matrix.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean, getmean = getmean)
}
## calculation part.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
cacheSolve(c(1,2,3))
q()
set.seed(1)
rpois(5, 2)
str(rpois)
ed
wd()
q()
install.packages("caret")
library(swirl)
swirl()
swirl()
install_course_directory("swirl_courses-master.zip")
swirl()
getwd()
q()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
setwd("d:/games/R/RWorkingDir")
setwd("D:/games/R/RStudioWorkingDir")
library(swirl)
q()
x <- "Hello" + "World!"
x <- "Hello"
y <- "world!"
x + y
print(x + y)
paste(x, y, sep = " ")
paste(x, y, collapse = " ")
x <- "10"
x + 1
class(x)
class(x) <- numeric()
class(x) <- numeric
class(x) <- 'numeric'
x
class(x)
x + 1
##f f
# f
apply
q()
pay1 <- c(-23, 0, 0, 0, 0, 0, 0, 0, 0, 50)
pay2 <- c(-10, -5, -5, -3, 0, 10, 10, 10, 10, 10)
sum(pay1)
sum(pay2)
f <- function(x, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
a1*x + a2*x^2 + a3*x^3 + a4*x^4 + a5*x^5 + a6*x^6 + a7*x^7 +a8*x^8 + a9*x^9 + a10*x^10
}
a1 <- pay1[1]
a2 <- pay1[2]
a3 <- pay1[3]
a4 <- pay1[4]
a5 <- pay1[5]
a6 <- pay1[6]
a7 <- pay1[7]
a8 <- pay1[8]
a9 <- pay1[9]
a10 <- pay1[10]
result1 <- uniroot(f, c(0,5), a1 = a1, a2 = a2, a3 = a3, a4 = a4, a5 = a5, a6 = a6, a7 =a7, a8 = a8, a9 = a9, a10 = a10, tol = .001)
result1
x <- seq(0, 5, by = .01)
y <- f(x, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
library(ggplot2)
df <- data.frame(x, y)
ggplot(df, aes(x, y)) + geom_line()
x <- seq(-1, 2, by = .01)
df <- data.frame(x, y)
y <- f(x, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
df <- data.frame(x, y)
ggplot(df, aes(x, y)) + geom_line()
f1 <- function(x, b1, b2) b1*x + b2*x^10
b1 <- -23
b2 <- 50
y <- f1(x, b1, b2)
df <- data.frame(x, y)
ggplot(df, aes(x, y)) + geom_line()
View(df)
q()
q()
qnorm(.6)
?qnorm
?pnrom
pnorm(.6)
pnorm(1.8)
.964-.726
pnrom(0.55, sd = 0.1)
pnorm(0.55, sd = 0.1)
qnorm(0.55, sd = 0.1)
qnorm(0.52, sd = 0.1)
q()
ln(1)
log(e)
log(1.7)
log(10)
e
log(0.05)/log(0.99)
qnorm(10)
qnorm(0.9)
qnorm(0.9985)
0.6 * sqrt(2) / 2.968
(0.6 * sqrt(2) / 2.968) ^ 2
(0.1 * sqrt(2) / 2.968) ^ 2
(2.968 / 0.6 / sqrt(2)) ^ 2
q()
pnrom(0.9)
pnorm(0.9)
qnorm(0.9)
1.28^3*16
34/(1+34/1800)
1.96^2*0.67^2*/.07^2
1.96^2*0.67^2/.07^2
(1.96^2)*(0.67^2)/(0.07)^2
352/(1+352/1800)
q()
x = c(140, 160,145,150,130,180,190,180,170,170,150,140,130,145,145,160,180,180,180,170)
length(x)
mean(x)
var(x)
(165 - 159.75) * sqrt(20) / sqrt(351.25)
pnorm(1.25)
?pt
pt(1.25, 19)
x2 = c(90,100,92,80,92,100,105,105,100,90,85,85,90,85,90,100,100,95,95,90)
length(x2)
mean(x2)
y1 = c(130,130,140,150,125,160,160,150,150,160,120,120,130,130,120,140,150,140,130,140)
length(y1)
mean(y1)
mean(x2)
var(x2)
(90 - 93.45) * sqrt(20) / sqrt(49.7)
pt(-2.18, 19)
z = 1:5
z[2]
z[2:5]
z[6:9] <- 0
z
?seq
?rep
a = 1:5
rep(seq(from = a, to = a + 4, by = 1), 2)
for(i in a) {}
rep(c(1, 2, 3, 4, 5), each = 2)
var(y1)
mean(y1)
qt(.05, 19)
-1.7 * sqrt(183.75) / sqrt(20)
138.75 - 5.2
138.75 -+ 5.2
138.75 + 5.2
y2 = c(85,80,85,80,90,85,90,95,85,80,80,80,80,85,80,90,65,80,85,80)
length(y2)
mean(y2)
var(y2)
1.7 * sqrt(37.9) / sqrt(20)
83 - 2.3
83 + 2.3
25 * 5 / 2 / 21
90 * 1.04 - 80
13.6/25
(0.544 * 5 + (1 - 0.544) * 30) / 1.04
110 * 1.04 - 102
12.4 / 20
0.38 * 8 / 1.04
q()
library(ggplot2)
?tapply
n <- 17; fac <- factor(rep(1:3, length = n), levels = 1:5)
tapply(1:n, fac, sum)
table(fac)
table(1:n, fac)
?lapply
x = 1:2
x = rep(1:5, each = 4)
qplot(x, geom = "bar")
?ggplot
setwd("D:/games/R/WorkingDir/games/sociaty")
world_data <- read.csv("./Data/first_test0.csv", header = T)
head(world_data)
str(world_data)
library(ggplot2)
qplot(x = Time, y = Gini, data = world_data, geom = "line")
qplot(x = Time[1:20], y = Gini, data = world_data, geom = "line")
qplot(x = Time[1:20], y = Gini, data = world_data[1:20], geom = "line")
qplot(x = Time[1:20], y = Gini, data = world_data[1:20,], geom = "line")
qplot(x = Richest, y = Gini, data = world_data, geom = "line")
qplot(x = Time, y = Richest, data = world_data, geom = "line")
qplot(x = Time, y = Poorest, data = world_data, geom = "line")
ggplot(data = world_data) + geom_line(aes(x = Time, y = Alive_num)) + geom_line(aes(x = Time, y = Threshold))
ggplot(data = world_data) + geom_line(aes(x = Time, y = Alive_num)) + geom_line(aes(x = Time, y = Threshold), color = "red")
qplot(x = Time, y = Richest, data = world_data, geom = "line") + labs(x = "Time", y = "Richest", main = "Hello")
qplot(x = Time, y = Richest, data = world_data, geom = "line") + labs(x = "Time", y = "Richest", head = "Hello")
?labs
qplot(x = Time, y = Richest, data = world_data, geom = "line") + labs(x = "Time", y = "Richest", title = "Hello")
entity_data <- read.csv("./Data/first_test1.csv", header = T)
str(entity_data)
qplot(x = Time, y = Richest - Poorest, data = world_data, geom = "line") + labs(x = "Time", y = "Richest", title = "Hello")
qplot(data = entity_data, x = Time, y = Weldare, group = factor(ID), color = factor(ID), geom = "line")
qplot(data = entity_data, x = Time, y = Welfare, group = factor(ID), color = factor(ID), geom = "line")
qplot(data = entity_data, x = Time, y = Welfare, group = factor(ID), color = factor(ID), geom = "line") + geom_line(x = Time, y = Threshold, color = "black")
qplot(data = entity_data, x = Time, y = Welfare, group = factor(ID), color = factor(ID), geom = "line") + geom_line(data = entity_data,x = Time, y = Threshold, color = "black")
ggplot(data = entity_data, aes(x = Time, group = factor(ID))) + geom_line(aes(y = Welfare), color = factor(ID)) + geom_line(aes(y = Threshold))
ggplot(data = entity_data, aes(x = Time, group = factor(ID))) + geom_line(aes(y = Welfare), color = factor(ID)) + geom_line(aes(y = Threshold))
ggplot(data = entity_data, aes(x = Time, group = factor(ID))) + geom_line(aes(y = Welfare, color = factor(ID))) + geom_line(aes(y = Threshold))
tail(entity_data)
tail(entity_data, n = 30)
tail(entity_data[entity_data$Status == 1,], n = 30)
? geom_line
entity_data <- read.csv("./Data/first_test1.csv", header = T)
ggplot(data = entity_data, aes(x = Time, group = factor(ID))) +
geom_line(aes(y = Welfare), color = factor(ID)) + geom_line(aes(y = Threshold), size = 3)
entity_data <- read.csv("./Data/first_test1.csv", header = T)
ggplot(data = entity_data, aes(x = Time, group = factor(ID))) +
geom_line(aes(y = Welfare), color = factor(ID)) + geom_line(aes(y = Threshold), size = 3)
entity_data <- read.csv("./Data/first_test1.csv", header = T)
ggplot(data = entity_data, aes(x = Time, group = factor(ID))) +
geom_line(aes(y = Welfare, color = factor(ID))) + geom_line(aes(y = Threshold), size = 3)
entity_data <- read.csv("./Data/first_test1.csv", header = T)
ggplot(data = entity_data, aes(x = Time, group = factor(ID))) +
geom_line(aes(y = Welfare, color = factor(ID))) + geom_line(aes(y = Threshold), size = 1.5)
ggplot(data = entity_data, aes(x = Time, group = factor(ID))) +
geom_line(aes(y = Welfare, color = factor(ID))) + geom_line(aes(y = Threshold), size = 0.8)
world_data <- read.csv("./Data/first_test0.csv", header = T)
qplot(x = Time, y = Gini, data = world_data, geom = "line") +
labs(title = "The Richest Entity's Welfare")
str(entity_data)
qplot(data = entity_data, x = Time, y = Field_product, group = factor(ID), color = factor(ID))
qplot(data = entity_data, x = Time, y = Field_product, group = factor(ID), color = factor(ID), geom = line)
qplot(data = entity_data, x = Time, y = Field_product, group = factor(ID), color = factor(ID), geom = "line")
qplot(data = entity_data, x = Time, y = Field_product, group = factor(ID), color = factor(ID), geom = "histogram")
qplot(data = entity_data, y = Field_product, group = factor(ID), color = factor(ID), geom = "histogram")
qplot(data = entity_data, y = Field_product, group = factor(ID) geom = "histogram")
qplot(data = entity_data, y = Field_product, geom = "histogram")
qplot(data = entity_data, x = Field_product, geom = "histogram")
qplot(data = entity_data, x = Field_product, group = factor(ID), color = factor(ID), geom = "histogram")
qplot(data = entity_data, x = Field_product, group = factor(ID), fill = factor(ID), geom = "histogram")
qplot(data = entity_data, x = Field_product, geom = "histogram")
qplot(data = entity_data, x = Field_product, geom = "histogram") + geom_abline(x = 150)
?geom_abline
qplot(data = entity_data, x = Field_product, geom = "histogram") + geom_vline(150)
qplot(data = entity_data, x = Field_product, geom = "histogram") + geom_vline(xintercept = 150)
qplot(data = entity_data, x = Field_product, geom = "histogram") + geom_vline(xintercept = mean(entity_data[entity_data$Time == 1,]$Field_product))
qplot(data = entity_data, x = Field_product, geom = "histogram") + geom_vline(xintercept = mean(entity_data[entity_data$Time == 1,]$Field_product), size = 0.8) + labs(title = "Barplot of Field Production", x = "Field production", y = "Count")
qplot(data = entity_data, x = Field_product, geom = "histogram")
+ geom_vline(xintercept = mean(entity_data[entity_data$Time == 1,]$Field_product), size = 0.8)
+ labs(title = "Barplot of Field Production", x = "Field production", y = "Count")
qplot(data = entity_data, x = Field_product, geom = "histogram") +
geom_vline(xintercept = mean(entity_data[entity_data$Time == 1,]$Field_product), size = 0.8) +
labs(title = "Barplot of Field Production", x = "Field production", y = "Count")
data <- read.csv("./Data/first_test1.csv")
qplot(data = data[data$Time == 10,], x = Welfare, geom = "histogram", )
qplot(data = data[data$Time == 50,], x = Welfare, geom = "histogram", )
qplot(data = data[data$Time == 100,], x = Welfare, geom = "histogram", )
3^3 * 2^2 / 5^5
summ = 0
for(i in 1:1000000000000) {summ += 0.03456^i}
for(i in 1:1000000000000) {summ += 0.03456^i}
for(i in 1:1000000000000) {summ += 0.03456^i}
for(i in 1:1000000000000) {summ = sum + 0.03456^i}
q()
